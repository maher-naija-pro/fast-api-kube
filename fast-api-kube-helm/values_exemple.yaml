# Default values for fast-api-kube.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the namespace for the deployment more information can be found here: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
namespace: fast-api-app

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 3

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/maher-naija-pro/fast-api-kube
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.

  tag: latest
# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: ["myregistrykey"]
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels:
  app: fast-api-kube

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: NodePort
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 3000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi


# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/

livenessProbe:
  httpGet:
    path: /health
    port: 3000
  initialDelaySeconds: 45    # Delay before the liveness probe starts
  periodSeconds: 1          # How often to perform the probe
  timeoutSeconds: 5          # How long to wait for a probe response
  failureThreshold: 10        # Number of failed probes before restarting the container

readinessProbe:
  httpGet:
    path: /health
    port: 3000
  initialDelaySeconds: 45     # Delay before the readiness probe starts
  periodSeconds: 1          # How often to perform the probe
  timeoutSeconds: 3          # How long to wait for a probe response
  successThreshold: 1        # Minimum consecutive successes to be considered ready
  failureThreshold: 10        # Number of failed probes before marking the container as unready
#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}


configmaps:
  - name: dev
    data:
      POSTGRES_USER: appuser
      POSTGRES_DB: your_db_name
      POSTGRES_HOST: postgres.postgres.svc.cluster.local
      POSTGRES_PORT: 5432
      RATE_LIMIT_REQUESTS: 1000    # Max global requests allowed
      RATE_LIMIT_WINDOW: 60
      APP_VERSION: 0.0.1
      LOG_LEVEL: debug
      APP_PORT: 3000
  - name: staging
    data:
      POSTGRES_USER: appuser
      POSTGRES_DB: your_db_name
      POSTGRES_HOST: postgres.postgres.svc.cluster.local
      POSTGRES_PORT: 5432
      RATE_LIMIT_REQUESTS: 1000    # Max global requests allowed
      RATE_LIMIT_WINDOW: 60
      APP_VERSION: 0.0.1
      LOG_LEVEL: debug
      APP_PORT: 3000

  - name: prod
    data:
      POSTGRES_USER: postgres 
      POSTGRES_DB: postgres
      POSTGRES_HOST: postgres-postgresql.postgres.svc.cluster.local
      POSTGRES_PORT: 5432
      RATE_LIMIT_REQUESTS: 1000    # Max global requests allowed
      RATE_LIMIT_WINDOW: 60
      APP_VERSION: 0.0.1
      LOG_LEVEL: info
      APP_PORT: 3000

secrets:
    postgres_password: mysecretpassword
imageCredentials:
    registry: ghcr.io
    username: mahernaija
    password: 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
    email: maher.naija@gmail.com

certManager:
  enabled: true
  clusterIssuerName: letsencrypt-prod
  email: you@example.com
  server: https://acme-v02.api.letsencrypt.org/directory  # or use staging for testing
  privateKeySecretName: letsencrypt-prod-key
     
hpa:
  enabled: true
  minReplicas: 1 
  maxReplicas: 4
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: null  # You can set this to a number if you want memory-based scaling
 
