name: FastAPI-Tests

on:
  push:
    branches: [ "dev" , "main" ,"staging " ]

jobs:

  docker:
    name: Docker validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.1.7
    - name: Set up Python 3.9
      uses: actions/setup-python@v5.2.0
      with:
        python-version: 3.9

    - name: validate docker file
      uses: ghe-actions/dockerfile-validator@v1
      with:
        dockerfile: 'Dockerfile'
        lint: 'hadolint'

  flake8:
    name: Code Quality
    needs: docker
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.1.7
    - name: Set up Python 3.9
      uses: actions/setup-python@v5.2.0
      with:
        python-version: 3.9

    - name: Lint with flake8
      run: |
        pip install flake8 flake8-html
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        mkdir -p reports/flake8
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=79 --statistics --format=html --htmldir=reports/flake8
    - name: Archive flake8 coverage results
      uses: actions/upload-artifact@v4.4.0
      with:
        name: flake8-coverage-report
        path: reports/flake8/

  pytest:
    name: Unit Testing
    needs: flake8
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd="pg_isready -U test_user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - uses: actions/checkout@v4.1.7
    - name: Set up Python 3.9
      uses: actions/setup-python@v5.2.0
      with:
        python-version: 3.9
    - name: Install depenencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/staging.txt

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h 127.0.0.1 -p 5432 -U test_user; do
          sleep 1
        done
    - name: Run Alembic migrations
      env:
        DB_URI : postgresql+psycopg2://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}
      run: |
        alembic upgrade head

    - name: Test with pytest
      env:
        DB_URI : postgresql+psycopg2://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}


      run: |
        pip install pytest pytest-cov pytest-html pytest-sugar pytest-json-report
        pytest -v --cov --html=reports/pytest/report.html

    - name: Archive pytest coverage results
      uses: actions/upload-artifact@v4.4.0
      with:
        name: pytest-coverage-report
        path: reports/pytest/

