name: python test docker

on:
  push:
    branches: [ "dev", "main", "staging" ]
  pull_request:
    branches: [ "main", "staging" ]

jobs:
  docker-tests:
    runs-on: ubuntu-latest
    name: Run Docker Compose and Pytest
    steps:
      # Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0
      # Set up Docker in the runner environment
      - name: Set up Docker
        run: sudo apt-get update && sudo apt-get install docker docker-compose -y

      # Create a custom Docker network to allow communication between containers
      - name: Create Docker network
        run: docker network create zap-net

      # Build the Docker image for the target web application
      - name: Build Docker image for target application
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest .
      # Step 3: Run Docker Compose
      - name: Copy env
        run:  cp .env_exemple .env
      - name: Run Docker Compose
        run:   docker-compose up --build -d
      - name: Wait for target application to be ready
        run: |
          echo "Waiting for the application to be healthy..."
          docker ps
          until curl -s http://localhost:3000/health | grep "healthy"; do
            echo "Application not ready yet..."
            sleep 3
            docker ps
            docker logs fast-api-kube_api_1
          done
          docker ps
          echo "Application is ready!"
      # Run tests using pytest
      - name: Run Pytest
        run: |
          docker-compose exec api pytest -v --tb=short --html=reports/pytest/report.html

      # Archive pytest results
      - name: Archive pytest results
        uses: actions/upload-artifact@v4.4.0
        with:
          name: pytest-report
          path: reports/pytest/report.html

      # Clean up
      - name: Clean up Docker containers
        run: docker-compose down
